{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport iconError from '../img/bi_x-octagon.svg';\n \nconst startBtn = document.querySelector('[data-start]');\nconst input = document.querySelector(\"#datetime-picker\");\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = null;\nlet timerId = null;\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor((ms % hour) / minute);\n  const seconds = Math.floor((ms % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimer() {\n  const now = Date.now();\n  const delta = userSelectedDate.getTime() - now;\n\n  if (delta <= 0) {\n    clearInterval(timerId);\n    daysEl.textContent = '00';\n    hoursEl.textContent = '00';\n    minutesEl.textContent = '00';\n    secondsEl.textContent = '00';\n    input.disabled = false;\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(delta);\n  daysEl.textContent = pad(days);\n  hoursEl.textContent = pad(hours);\n  minutesEl.textContent = pad(minutes);\n  secondsEl.textContent = pad(seconds);\n}\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  disableMobile: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    console.log(userSelectedDate);\n\n    if (userSelectedDate <= new Date()) {\n     \n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        iconUrl: iconError,\n      });\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr('#datetime-picker', options);\n\nstartBtn.addEventListener('click', () => {\n    startBtn.disabled = true;\n  input.disabled = true;\n  timerId = setInterval(updateTimer, 1000);\n  updateTimer();\n});"],"names":["startBtn","input","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerId","convertMs","ms","days","hours","minutes","seconds","pad","value","updateTimer","now","delta","options","selectedDates","iziToast","iconError","flatpickr"],"mappings":"iJAMA,MAAMA,EAAW,SAAS,cAAc,cAAc,EAChDC,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EAAmB,KACnBC,EAAU,KAEd,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAOH,EAAK,KAAQ,GAAM,EACzCI,EAAU,KAAK,MAAOJ,EAAK,IAAU,GAAM,EAEjD,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAIC,EAAO,CAClB,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,GAAc,CACrB,MAAMC,EAAM,KAAK,IAAG,EACdC,EAAQZ,EAAiB,QAAO,EAAKW,EAE3C,GAAIC,GAAS,EAAG,CACd,cAAcX,CAAO,EACrBL,EAAO,YAAc,KACrBC,EAAQ,YAAc,KACtBC,EAAU,YAAc,KACxBC,EAAU,YAAc,KACxBJ,EAAM,SAAW,GACjB,MACF,CAEA,KAAM,CAAE,KAAAS,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAKL,EAAUU,CAAK,EACzDhB,EAAO,YAAcY,EAAIJ,CAAI,EAC7BP,EAAQ,YAAcW,EAAIH,CAAK,EAC/BP,EAAU,YAAcU,EAAIF,CAAO,EACnCP,EAAU,YAAcS,EAAID,CAAO,CACrC,CAEA,MAAMM,EAAU,CACd,WAAY,GACZ,UAAW,GACX,cAAe,GACf,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBd,EAAmBc,EAAc,CAAC,EAClC,QAAQ,IAAId,CAAgB,EAExBA,GAAoB,IAAI,MAE1Be,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,QAASC,CACjB,CAAO,EACDtB,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAExB,CACF,EAEAuB,EAAU,mBAAoBJ,CAAO,EAErCnB,EAAS,iBAAiB,QAAS,IAAM,CACrCA,EAAS,SAAW,GACtBC,EAAM,SAAW,GACjBM,EAAU,YAAYS,EAAa,GAAI,EACvCA,EAAW,CACb,CAAC"}